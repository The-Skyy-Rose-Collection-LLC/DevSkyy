version: '3.8'

services:
  # ============================================================================
  # API INTEGRATION CORE SERVICES
  # ============================================================================
  
  api-gateway:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api-gateway
    container_name: devskyy-api-gateway
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - FASHION_INTELLIGENCE_ENABLED=true
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      - redis
      - elasticsearch
    volumes:
      - ./logs:/app/logs
    networks:
      - devskyy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  workflow-engine:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.workflow-engine
    container_name: devskyy-workflow-engine
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - API_GATEWAY_URL=http://api-gateway:8000
      - FASHION_WORKFLOWS_ENABLED=true
    depends_on:
      - redis
      - elasticsearch
      - api-gateway
    volumes:
      - ./logs:/app/logs
    networks:
      - devskyy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  fashion-api-integrator:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.fashion-apis
    container_name: devskyy-fashion-apis
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - FASHION_INTELLIGENCE_URL=http://fashion-intelligence:8003
      - PINTEREST_API_KEY=${PINTEREST_API_KEY}
      - INSTAGRAM_API_KEY=${INSTAGRAM_API_KEY}
      - SHOPIFY_API_KEY=${SHOPIFY_API_KEY}
    depends_on:
      - redis
      - elasticsearch
      - fashion-intelligence
    volumes:
      - ./logs:/app/logs
    networks:
      - devskyy-network
    restart: unless-stopped
  
  fashion-intelligence:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.fashion-intelligence
    container_name: devskyy-fashion-intelligence
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FASHION_DATA_PATH=/app/fashion_data
    volumes:
      - ./fashion_data:/app/fashion_data
      - ./logs:/app/logs
    networks:
      - devskyy-network
    restart: unless-stopped
  
  # ============================================================================
  # INFRASTRUCTURE SERVICES
  # ============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: devskyy-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - devskyy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: devskyy-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - devskyy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  # ============================================================================
  # MONITORING & OBSERVABILITY
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: devskyy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - devskyy-network
    restart: unless-stopped
  
  grafana:
    image: grafana/grafana:latest
    container_name: devskyy-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=devskyy_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - devskyy-network
    restart: unless-stopped
    depends_on:
      - prometheus
  
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: devskyy-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - devskyy-network
    restart: unless-stopped
  
  # ============================================================================
  # LOAD BALANCER & REVERSE PROXY
  # ============================================================================
  
  nginx:
    image: nginx:alpine
    container_name: devskyy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-gateway
      - workflow-engine
      - fashion-api-integrator
      - grafana
    networks:
      - devskyy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ============================================================================
  # FASHION INDUSTRY SPECIFIC SERVICES
  # ============================================================================
  
  trend-analyzer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.trend-analyzer
    container_name: devskyy-trend-analyzer
    environment:
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - FASHION_INTELLIGENCE_URL=http://fashion-intelligence:8003
      - SOCIAL_MEDIA_APIS_ENABLED=true
    depends_on:
      - redis
      - elasticsearch
      - fashion-intelligence
    volumes:
      - ./logs:/app/logs
      - ./trend_data:/app/trend_data
    networks:
      - devskyy-network
    restart: unless-stopped
  
  sustainability-tracker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.sustainability
    container_name: devskyy-sustainability
    environment:
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SUSTAINABILITY_APIS_ENABLED=true
      - CARBON_TRACKING_ENABLED=true
    depends_on:
      - redis
      - elasticsearch
    volumes:
      - ./logs:/app/logs
      - ./sustainability_data:/app/sustainability_data
    networks:
      - devskyy-network
    restart: unless-stopped
  
  # ============================================================================
  # BACKUP & MAINTENANCE
  # ============================================================================
  
  backup-service:
    image: alpine:latest
    container_name: devskyy-backup
    volumes:
      - redis-data:/backup/redis
      - elasticsearch-data:/backup/elasticsearch
      - grafana-data:/backup/grafana
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: |
      sh -c "
        apk add --no-cache curl &&
        chmod +x /backup.sh &&
        crond -f -d 8
      "
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - devskyy-network
    restart: unless-stopped

# ============================================================================
# NETWORKS & VOLUMES
# ============================================================================

networks:
  devskyy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ============================================================================
# ENVIRONMENT VARIABLES
# ============================================================================

# Create a .env file with the following variables:
# PINTEREST_API_KEY=your_pinterest_api_key
# INSTAGRAM_API_KEY=your_instagram_api_key
# SHOPIFY_API_KEY=your_shopify_api_key
# OPENAI_API_KEY=your_openai_api_key
# BACKUP_S3_BUCKET=your_backup_bucket
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key
