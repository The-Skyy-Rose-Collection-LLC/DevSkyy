[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "devskyy"
version = "5.2.0"
description = "Enterprise AI-Powered Fashion E-commerce Automation Platform"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "DevSkyy Team", email = "dev@devskyy.com"}
]
maintainers = [
    {name = "DevSkyy Team", email = "dev@devskyy.com"}
]
keywords = [
    "ai", "ecommerce", "fashion", "automation", "machine-learning",
    "fastapi", "enterprise", "saas", "microservices"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Office/Business :: Financial :: Point-Of-Sale",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.119.0",
    "uvicorn[standard]>=0.34.0",
    "pydantic>=2.7.4",
    "pydantic-settings>=2.7.0",
    "sqlalchemy>=2.0.36",
    "alembic>=1.14.0",
    "asyncpg>=0.30.0",
    "redis>=5.2.1",
    "elasticsearch>=8.17.0",
    "anthropic>=0.69.0",
    "openai>=2.3.0",
    "httpx>=0.28.1",
    "aiofiles>=24.1.0",
    "python-multipart>=0.0.17",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "celery>=5.4.0",
    "motor>=3.7.0",
    "clickhouse-driver>=0.2.9",
    "prometheus-client>=0.22.0",
    "structlog>=24.4.0",
    "sentry-sdk[fastapi]>=2.19.0",
    "requests>=2.32.3",
    "certifi>=2024.8.30",
    "dnspython>=2.7.0",
    "paramiko>=3.5.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.10.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "mypy>=1.13.0",
    "pytest>=8.4.2",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pre-commit>=3.8.0",
    "bandit>=1.7.10",
    "safety>=3.2.11",
    "ruff>=0.8.4",
]
test = [
    "pytest>=8.4.2",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.28.1",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
]
docs = [
    "sphinx>=8.1.3",
    "sphinx-rtd-theme>=3.0.2",
    "myst-parser>=4.0.0",
    "sphinx-autodoc-typehints>=2.4.4",
]
monitoring = [
    "prometheus-client>=0.22.0",
    "sentry-sdk[fastapi]>=2.19.0",
    "structlog>=24.4.0",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation-fastapi>=0.50b0",
]

[project.urls]
Homepage = "https://github.com/devskyy/platform"
Documentation = "https://docs.devskyy.com"
Repository = "https://github.com/devskyy/platform"
"Bug Tracker" = "https://github.com/devskyy/platform/issues"
Changelog = "https://github.com/devskyy/platform/blob/main/CHANGELOG.md"

[project.scripts]
devskyy = "main:main"

# ============================================================================
# TOOL CONFIGURATION
# ============================================================================

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "*.tests", "*.tests.*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml", "*.md", "*.txt"]

# Black Configuration (Backup - Ruff is primary formatter)
[tool.black]
line-length = 119  # Updated to match transformers standard
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | htmlcov
)/
'''

# isort Configuration (Backup - Ruff is primary import sorter)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 119  # Updated to match transformers standard
known_first_party = ["devskyy", "agent", "api", "ml", "fashion", "infrastructure"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "redis", "anthropic", "openai"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_alphabetical_sort_within_sections = true
skip_gitignore = true

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "openai.*",
    "transformers.*",
    "torch.*",
    "tensorflow.*",
    "cv2.*",
    "PIL.*",
    "selenium.*",
    "playwright.*",
    "beautifulsoup4.*",
    "lxml.*",
    "redis.*",
    "celery.*",
    "prometheus_client.*",
    "sentry_sdk.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "*/migrations/*",
    "*/htmlcov/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ============================================================================
# RUFF CONFIGURATION (Modern Linting & Formatting)
# ============================================================================

[tool.ruff]
target-version = "py311"
line-length = 119  # Increased from 88 to match transformers standard
src = [".", "tests"]
extend-exclude = [
    "__pycache__",
    ".git",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    "htmlcov",
    ".pytest_cache",
    ".mypy_cache",
]

[tool.ruff.lint]
# Enable comprehensive linting rules (transformers-inspired)
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "C",      # mccabe complexity
    "UP",     # pyupgrade
    "RUF",    # ruff-specific rules
    "B",      # flake8-bugbear
    "S",      # flake8-bandit (security)
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "PERF",   # perflint
    "PL",     # pylint
]

# Ignore specific rules that may conflict with our codebase
ignore = [
    "E501",   # Line too long (handled by formatter)
    "S101",   # Use of assert (common in tests)
    "S104",   # Possible binding to all interfaces
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "C901",   # Complex function
    "SIM300", # Yoda conditions
    "SIM212", # Checks for if expressions that check against a negated condition
    "SIM905", # Consider using a list literal instead of str.split
    "UP009",  # UTF-8 encoding declaration is unnecessary
    "UP015",  # Unnecessary mode argument
    "UP031",  # Use format specifiers instead of percent format
    "UP004",  # Class inherits from object
    "UP028",  # Checks for for loops that can be replaced with yield from
    "UP045",  # Use X | None for type annotations
    "UP007",  # Use X | Y for type annotations
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403", "E402"]  # Unused imports in __init__.py
"tests/**/*.py" = ["S101", "PLR2004", "S106", "S105"]  # Test-specific ignores
"scripts/**/*.py" = ["T20"]  # Allow print statements in scripts
"agent/**/*.py" = ["PLR0913"]  # Allow many arguments in agent modules
"api/**/*.py" = ["B008"]  # Allow function calls in argument defaults for FastAPI

[tool.ruff.lint.isort]
known-first-party = ["devskyy", "agent", "api", "ml", "fashion", "infrastructure"]
lines-after-imports = 2
split-on-trailing-comma = true
force-alphabetical-sort-within-sections = true

[tool.ruff.lint.mccabe]
max-complexity = 12  # Slightly higher for complex business logic

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# BANDIT SECURITY CONFIGURATION
# ============================================================================

[tool.bandit]
exclude_dirs = ["tests", "scripts", "htmlcov", ".venv"]
skips = ["B101", "B601", "B602"]  # Skip assert_used and shell_injection in tests