name: CI - Multi-Stage Pipeline

on:
  push:
    branches: [main, develop, 'claude/**']
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11.9'
  COVERAGE_THRESHOLD: 90

jobs:
  # Stage 1: Code Quality
  quality:
    name: Code Quality (Lint + Type)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip==24.0
          pip install ruff==0.1.7 mypy==1.7.1

      - name: Ruff lint
        run: |
          ruff check src tests --output-format=github
        continue-on-error: false

      - name: Ruff format check
        run: |
          ruff format --check src tests
        continue-on-error: false

      - name: MyPy type check
        run: |
          mypy src --strict --ignore-missing-imports --no-error-summary
        continue-on-error: false

  # Stage 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip==24.0
          pip install bandit[toml]==1.7.5 safety==3.0.1
          pip install -e .

      - name: Bandit security scan
        run: |
          bandit -r src -f json -o bandit-report.json
          bandit -r src -ll
        continue-on-error: false

      - name: Safety dependency scan
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Stage 3: Unit Tests
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: [quality, security]

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: fashion_user
          POSTGRES_PASSWORD: fashion_password
          POSTGRES_DB: fashion_ai
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip==24.0
          pip install -e ".[dev,test]"

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
            --junitxml=junit.xml
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          DB_HOST: localhost
          DB_PORT: 5432

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            junit.xml
          retention-days: 30

  # Stage 4: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: fashion_user
          POSTGRES_PASSWORD: fashion_password
          POSTGRES_DB: fashion_ai
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip==24.0
          pip install -e ".[dev,test]"

      - name: Run integration tests
        run: |
          pytest tests/ -v -m integration
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          DB_HOST: localhost
          DB_PORT: 5432

  # Stage 5: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, integration]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Build package
        run: |
          python -m pip install --upgrade pip==24.0
          pip install build==1.0.3
          python -m build

      - name: Verify build
        run: |
          pip install dist/*.whl
          python -c "import src; print('Build verification: OK')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  # Gate: All checks must pass
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [quality, security, test, integration, build]
    if: always()
    steps:
      - name: Check pipeline status
        run: |
          if [ "${{ needs.quality.result }}" != "success" ]; then
            echo "Quality checks failed"
            exit 1
          fi
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "Security scans failed"
            exit 1
          fi
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed"
            exit 1
          fi
          if [ "${{ needs.integration.result }}" != "success" ]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build verification failed"
            exit 1
          fi
          echo "âœ… All CI stages passed - Ready for deployment"
