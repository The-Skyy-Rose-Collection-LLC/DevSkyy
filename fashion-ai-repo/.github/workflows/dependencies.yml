name: Dependency Management

on:
  schedule:
    # Run every Monday at 03:00 UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  dependency-audit:
    name: Audit Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.9'
          cache: 'pip'

      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip==24.0
          pip install pip-audit==2.6.3 safety==3.0.1

      - name: Run pip-audit
        run: |
          pip-audit --desc --format json --output audit-report.json || true
          pip-audit --desc

      - name: Run safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-reports
          path: |
            audit-report.json
            safety-report.json
          retention-days: 90

      - name: Generate audit summary
        run: |
          echo "## Dependency Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          pip-audit --format table || echo "Vulnerabilities found"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  check-outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip==24.0
          pip install -e .

      - name: Check for outdated packages
        run: |
          pip list --outdated --format=columns > outdated.txt
          cat outdated.txt

      - name: Upload outdated list
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies
          path: outdated.txt
          retention-days: 30

  update-dependencies:
    name: Update Dependencies (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.9'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip==24.0
          pip install pip-tools==7.3.0

      - name: Compile updated requirements
        run: |
          pip-compile requirements.in --upgrade --output-file requirements-new.txt || true

      - name: Check for changes
        id: changes
        run: |
          if diff -q requirements.txt requirements-new.txt; then
            echo "No dependency updates available"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Dependency updates found"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            mv requirements-new.txt requirements.txt
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update dependencies'
          title: 'üîÑ Update dependencies'
          body: |
            ## Dependency Updates

            This PR updates project dependencies to their latest compatible versions.

            ### Changes
            - Updated dependencies based on compatibility constraints
            - All updates verified with pip-compile

            ### Testing
            - [ ] CI pipeline passes
            - [ ] Security scans pass
            - [ ] Manual testing completed

            **Auto-generated by dependency management workflow**
          branch: deps/auto-update
          delete-branch: true
          labels: |
            dependencies
            automated

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip==24.0
          pip install pip-licenses==4.3.3
          pip install -e .

      - name: Generate license report
        run: |
          pip-licenses --format=markdown --output-file=LICENSE-REPORT.md
          pip-licenses --format=json --output-file=licenses.json

      - name: Check for incompatible licenses
        run: |
          # Fail if GPL or other copyleft licenses detected
          if grep -i "gpl\|agpl\|lgpl" licenses.json; then
            echo "‚ö†Ô∏è  Copyleft license detected - manual review required"
            exit 0
          fi
          echo "‚úÖ All licenses compatible"

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            LICENSE-REPORT.md
            licenses.json
          retention-days: 90

  dependency-gate:
    name: Dependency Gate
    runs-on: ubuntu-latest
    needs: [dependency-audit, check-outdated, license-compliance]
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.dependency-audit.result }}" != "success" ]; then
            echo "‚ö†Ô∏è  Dependency audit completed with findings"
          fi
          if [ "${{ needs.check-outdated.result }}" != "success" ]; then
            echo "‚ùå Outdated check failed"
            exit 1
          fi
          if [ "${{ needs.license-compliance.result }}" != "success" ]; then
            echo "‚ùå License compliance check failed"
            exit 1
          fi
          echo "‚úÖ Dependency management gate passed"
