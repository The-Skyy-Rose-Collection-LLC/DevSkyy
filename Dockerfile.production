# DevSkyy Enterprise v5.1 - Production Dockerfile
# Optimized for Linux AMD64 deployment to Docker Cloud
# Target: cloud://skyyrosellc/devskyy_linux-amd64

# ============================================================================
# Stage 1: Builder
# ============================================================================
FROM python:3.11-slim as builder

# Set build arguments
ARG TARGETPLATFORM=linux/amd64
ARG BUILDPLATFORM=linux/amd64

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements (lightweight production version)
COPY requirements-production.txt .

# Install Python dependencies (excludes heavy ML libs to reduce size)
RUN pip install --no-cache-dir --user -r requirements-production.txt

# ============================================================================
# Stage 2: Production Runtime
# ============================================================================
FROM python:3.11-slim

# Set metadata
LABEL maintainer="SkyyRoseLLC <enterprise@devskyy.com>"
LABEL version="5.1.0"
LABEL description="DevSkyy Enterprise AI Platform - Production Ready"
LABEL architecture="linux/amd64"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    DEBIAN_FRONTEND=noninteractive \
    # Production settings
    ENVIRONMENT=production \
    HOST=0.0.0.0 \
    PORT=8000 \
    WORKERS=4

# Create app user (security best practice)
RUN useradd -m -u 1000 -s /bin/bash devskyy

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /root/.local /home/devskyy/.local

# Copy application code
COPY --chown=devskyy:devskyy . .

# Create necessary directories
RUN mkdir -p /app/logs /app/data && \
    chown -R devskyy:devskyy /app

# Switch to non-root user
USER devskyy

# Add local Python packages to PATH
ENV PATH=/home/devskyy/.local/bin:$PATH

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/monitoring/health || exit 1

# Expose port
EXPOSE 8000

# Default command
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
