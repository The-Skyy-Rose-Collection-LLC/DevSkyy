name: 'Setup DevSkyy Environment'
description: 'Composite action to setup DevSkyy development environment with all dependencies'
author: 'DevSkyy Team'

inputs:
  python-version:
    description: 'Python version to setup'
    required: false
    default: '3.11'
  node-version:
    description: 'Node.js version to setup'
    required: false
    default: '18'
  install-dependencies:
    description: 'Install Python and Node dependencies'
    required: false
    default: 'true'
  setup-services:
    description: 'Setup Redis and other services'
    required: false
    default: 'false'
  cache-key-suffix:
    description: 'Additional suffix for cache keys'
    required: false
    default: ''

outputs:
  python-version:
    description: 'Installed Python version'
    value: ${{ steps.python-setup.outputs.python-version }}
  node-version:
    description: 'Installed Node.js version'
    value: ${{ steps.node-setup.outputs.node-version }}
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.cache-deps.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: 🔍 Validate Inputs
      shell: bash
      run: |
        echo "🔍 Validating environment setup inputs..."
        echo "Python version: ${{ inputs.python-version }}"
        echo "Node.js version: ${{ inputs.node-version }}"
        echo "Install dependencies: ${{ inputs.install-dependencies }}"
        echo "Setup services: ${{ inputs.setup-services }}"
    
    - name: 🐍 Setup Python
      id: python-setup
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip'
    
    - name: 🟢 Setup Node.js
      id: node-setup
      if: inputs.node-version != ''
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
    
    - name: 📦 Cache Dependencies
      id: cache-deps
      if: inputs.install-dependencies == 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.npm
          node_modules
        key: deps-${{ runner.os }}-py${{ inputs.python-version }}-node${{ inputs.node-version }}-${{ hashFiles('**/requirements*.txt', '**/package*.json') }}${{ inputs.cache-key-suffix }}
        restore-keys: |
          deps-${{ runner.os }}-py${{ inputs.python-version }}-node${{ inputs.node-version }}-
          deps-${{ runner.os }}-py${{ inputs.python-version }}-
          deps-${{ runner.os }}-
    
    - name: 📦 Install Python Dependencies
      if: inputs.install-dependencies == 'true'
      shell: bash
      run: |
        echo "📦 Installing Python dependencies..."
        python -m pip install --upgrade pip setuptools wheel
        
        # Install main dependencies
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Install test dependencies if available
        if [ -f requirements-test.txt ]; then
          pip install -r requirements-test.txt
        fi
        
        # Install development dependencies if available
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        fi
        
        echo "✅ Python dependencies installed"
    
    - name: 📦 Install Node.js Dependencies
      if: inputs.install-dependencies == 'true' && inputs.node-version != ''
      shell: bash
      run: |
        if [ -f package.json ]; then
          echo "📦 Installing Node.js dependencies..."
          npm ci
          echo "✅ Node.js dependencies installed"
        else
          echo "ℹ️ No package.json found, skipping Node.js dependencies"
        fi
    
    - name: 🔧 Setup Services
      if: inputs.setup-services == 'true'
      shell: bash
      run: |
        echo "🔧 Setting up development services..."
        
        # Create necessary directories
        mkdir -p logs
        mkdir -p data/redis
        mkdir -p data/elasticsearch
        
        # Set environment variables for development
        echo "ENVIRONMENT=development" >> $GITHUB_ENV
        echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "ELASTICSEARCH_URL=http://localhost:9200" >> $GITHUB_ENV
        
        echo "✅ Development services configured"
    
    - name: 🔍 Verify Installation
      shell: bash
      run: |
        echo "🔍 Verifying installation..."
        
        # Check Python
        python --version
        pip --version
        
        # Check Node.js if installed
        if command -v node &> /dev/null; then
          node --version
          npm --version
        fi
        
        # List installed Python packages
        echo "📦 Installed Python packages:"
        pip list | head -20
        
        echo "✅ Installation verified"
    
    - name: 📊 Environment Summary
      shell: bash
      run: |
        echo "# 🚀 DevSkyy Environment Setup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ steps.python-setup.outputs.python-version }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ inputs.node-version }}" != "" ]]; then
          echo "- **Node.js Version**: ${{ steps.node-setup.outputs.node-version }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Dependencies Installed**: ${{ inputs.install-dependencies }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Services Setup**: ${{ inputs.setup-services }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache Hit**: ${{ steps.cache-deps.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Ready for Development" >> $GITHUB_STEP_SUMMARY
        echo "The DevSkyy environment is now ready for development and testing." >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'settings'
  color: 'blue'
