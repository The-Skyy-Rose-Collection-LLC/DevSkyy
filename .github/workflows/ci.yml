name: DevSkyy Enterprise CI/CD

on:
  push:
    branches: [ main, develop, 'claude/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint-and-type-check:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: 🎨 Check code formatting (Black)
        run: |
          black --check . || echo "::warning::Code formatting issues found. Run 'black .' locally."

      - name: 📐 Check import sorting (isort)
        run: |
          isort --check-only . || echo "::warning::Import sorting issues found. Run 'isort .' locally."

      - name: 🔍 Lint with Ruff
        run: |
          ruff check . || echo "::warning::Linting issues found."

      - name: 🔎 Type check with MyPy
        run: |
          mypy . --ignore-missing-imports || echo "::warning::Type checking issues found."
        continue-on-error: true

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🔒 Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f screen

      - name: 🛡️ Check dependencies with Safety
        run: |
          safety check --json || echo "::warning::Dependency vulnerabilities found."
        continue-on-error: true

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: 🧪 Run tests with coverage
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
        continue-on-error: true

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.11'
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml

      - name: 📈 Coverage comment
        if: matrix.python-version == '3.11' && github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
        continue-on-error: true

  syntax-validation:
    name: ✅ Syntax Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔍 Validate Python syntax
        run: |
          echo "Checking Python files for syntax errors..."
          errors=0
          total=0

          for file in $(find . -name "*.py" -not -path "*/venv/*" -not -path "*/.git/*" -not -path "*/node_modules/*"); do
            total=$((total + 1))
            if ! python -m py_compile "$file" 2>/dev/null; then
              echo "::error file=$file::Syntax error in $file"
              python -m py_compile "$file" 2>&1 | head -3
              errors=$((errors + 1))
            fi
          done

          echo "::notice::Validated $total Python files, found $errors with syntax errors"

          if [ $errors -gt 0 ]; then
            echo "::warning::$errors files have syntax errors - these should be fixed"
          fi

  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, security-scan, test, syntax-validation]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🟢 Set up Node.js (for Vercel)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📦 Install Vercel CLI (if package.json exists)
        run: |
          if [ -f package.json ]; then
            npm install
          fi

      - name: ✅ Verify installation
        run: |
          python --version
          pip list
          python -c "import fastapi; print(f'FastAPI version: {fastapi.__version__}')"

      - name: 📊 Build summary
        run: |
          echo "## 🚀 Build Verification Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Version**: $(python --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Pip Version**: $(pip --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All dependencies installed successfully" >> $GITHUB_STEP_SUMMARY

  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ⚡ Performance metrics
        run: |
          echo "## ⚡ Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Import Time**: Measured below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          time python -c "import main" || echo "::warning::main.py has import issues"

  enterprise-compliance:
    name: 📋 Enterprise Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Check CLAUDE.md compliance
        run: |
          if [ -f CLAUDE.md ]; then
            echo "::notice::CLAUDE.md found - Truth Protocol enforced"
            echo "## 📋 Enterprise Compliance" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ CLAUDE.md (Truth Protocol) present" >> $GITHUB_STEP_SUMMARY
          else
            echo "::warning::CLAUDE.md not found"
          fi

      - name: 📄 Check required files
        run: |
          files_missing=0

          for file in requirements.txt README.md .gitignore; do
            if [ -f "$file" ]; then
              echo "::notice::Found $file"
            else
              echo "::warning::Missing $file"
              files_missing=$((files_missing + 1))
            fi
          done

          if [ $files_missing -eq 0 ]; then
            echo "✅ All required files present" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ $files_missing required files missing" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔍 Check for secrets
        run: |
          if grep -r "password.*=.*['\"]" --include="*.py" . | grep -v "getenv\|environ\|test"; then
            echo "::error::Potential hardcoded secrets found"
            exit 1
          else
            echo "::notice::No hardcoded secrets detected"
          fi

  status-summary:
    name: 📊 CI/CD Status Summary
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, security-scan, test, syntax-validation, build-verification, enterprise-compliance]
    if: always()
    steps:
      - name: 📊 Generate summary
        run: |
          echo "# 🎯 DevSkyy CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Jobs Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-and-type-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Syntax Validation | ${{ needs.syntax-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification | ${{ needs.build-verification.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Enterprise Compliance | ${{ needs.enterprise-compliance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
